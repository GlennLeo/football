{"ast":null,"code":"var _jsxFileName = \"/Users/glennleo/newproject/packages/client/pages/index.tsx\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { useQuery, gql } from \"@apollo/client\";\nimport Layout from \"../components/Layout\";\nimport { withApollo } from \"../apollo/apollo\";\nconst QUERY = gql`\n  query GetUser {\n    users {\n      id\n      name\n      email\n      password\n      phone\n    }\n  }\n`;\n\nconst NOSSR = () => {\n  const {\n    data,\n    loading,\n    error,\n    refetch\n  } = useQuery(QUERY);\n  if (loading) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 21\n    }\n  }, \"Error: \", error.message);\n  console.log(data);\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  }, \"This should be rendered on client side\"), data.users.map(user => {\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 11\n      }\n    }, __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }\n    }, user.name), __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }\n    }, user.email), __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 13\n      }\n    }, user.phone));\n  }), __jsx(\"button\", {\n    onClick: () => refetch(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }, \"Refetch\"));\n};\n\nexport default withApollo({\n  ssr: false\n})(NOSSR);","map":{"version":3,"sources":["/Users/glennleo/newproject/packages/client/pages/index.tsx"],"names":["React","useQuery","gql","Layout","withApollo","QUERY","NOSSR","data","loading","error","refetch","message","console","log","users","map","user","name","email","phone","ssr"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,GAAnB,QAA8B,gBAA9B;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAEA,MAAMC,KAAK,GAAGH,GAAI;;;;;;;;;;CAAlB;;AAYA,MAAMI,KAAK,GAAG,MAAM;AAClB,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA,KAAjB;AAAwBC,IAAAA;AAAxB,MAAoCT,QAAQ,CAACI,KAAD,CAAlD;AAEA,MAAIG,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACb,MAAIC,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAWA,KAAK,CAACE,OAAjB,CAAP;AACXC,EAAAA,OAAO,CAACC,GAAR,CAAYN,IAAZ;AACA,SACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CADF,EAEGA,IAAI,CAACO,KAAL,CAAWC,GAAX,CAAgBC,IAAD,IAAe;AAC7B,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKA,IAAI,CAACC,IAAV,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAID,IAAI,CAACE,KAAT,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAIF,IAAI,CAACG,KAAT,CAHF,CADF;AAOD,GARA,CAFH,EAWE;AAAQ,IAAA,OAAO,EAAE,MAAMT,OAAO,EAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAXF,CADF;AAeD,CArBD;;AAuBA,eAAeN,UAAU,CAAC;AAAEgB,EAAAA,GAAG,EAAE;AAAP,CAAD,CAAV,CAA2Bd,KAA3B,CAAf","sourcesContent":["import React from \"react\";\nimport { useQuery, gql } from \"@apollo/client\";\nimport Layout from \"../components/Layout\";\nimport { withApollo } from \"../apollo/apollo\";\n\nconst QUERY = gql`\n  query GetUser {\n    users {\n      id\n      name\n      email\n      password\n      phone\n    }\n  }\n`;\n\nconst NOSSR = () => {\n  const { data, loading, error, refetch } = useQuery(QUERY);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error: {error.message}</p>;\n  console.log(data);\n  return (\n    <Layout>\n      <h1>This should be rendered on client side</h1>\n      {data.users.map((user: any) => {\n        return (\n          <div>\n            <h1>{user.name}</h1>\n            <p>{user.email}</p>\n            <p>{user.phone}</p>\n          </div>\n        );\n      })}\n      <button onClick={() => refetch()}>Refetch</button>\n    </Layout>\n  );\n};\n\nexport default withApollo({ ssr: false })(NOSSR);\n"]},"metadata":{},"sourceType":"module"}