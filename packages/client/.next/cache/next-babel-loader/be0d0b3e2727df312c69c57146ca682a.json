{"ast":null,"code":"var _jsxFileName = \"/Users/glennleo/newproject/packages/client/pages/ssr.tsx\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { useQuery, gql } from \"@apollo/client\";\nimport Layout from \"../components/Layout\";\nimport { withApollo } from \"../apollo/apollo\";\nconst QUERY = gql`\n  query GetHello {\n    getPost\n  }\n`;\n\nconst SSR = () => {\n  const {\n    data,\n    loading,\n    error,\n    refetch\n  } = useQuery(QUERY);\n  if (loading) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 21\n    }\n  }, \"Error: \", error.message);\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 5\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }\n  }, \"This should be rendered on server side\"), __jsx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }\n  }, \"Data: \", data.getPost), __jsx(\"button\", {\n    onClick: () => refetch(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  }, \"Refetch\"));\n};\n\nexport default withApollo({\n  ssr: true\n})(SSR);","map":{"version":3,"sources":["/Users/glennleo/newproject/packages/client/pages/ssr.tsx"],"names":["React","useQuery","gql","Layout","withApollo","QUERY","SSR","data","loading","error","refetch","message","getPost","ssr"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,GAAnB,QAA8B,gBAA9B;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAEA,MAAMC,KAAK,GAAGH,GAAI;;;;CAAlB;;AAMA,MAAMI,GAAG,GAAG,MAAM;AAChB,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA,KAAjB;AAAwBC,IAAAA;AAAxB,MAAoCT,QAAQ,CAACI,KAAD,CAAlD;AAEA,MAAIG,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACb,MAAIC,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAWA,KAAK,CAACE,OAAjB,CAAP;AAEX,SACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAYJ,IAAI,CAACK,OAAjB,CAFF,EAGE;AAAQ,IAAA,OAAO,EAAE,MAAMF,OAAO,EAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAHF,CADF;AAOD,CAbD;;AAeA,eAAeN,UAAU,CAAC;AAAES,EAAAA,GAAG,EAAE;AAAP,CAAD,CAAV,CAA0BP,GAA1B,CAAf","sourcesContent":["import React from \"react\";\nimport { useQuery, gql } from \"@apollo/client\";\nimport Layout from \"../components/Layout\";\nimport { withApollo } from \"../apollo/apollo\";\n\nconst QUERY = gql`\n  query GetHello {\n    getPost\n  }\n`;\n\nconst SSR = () => {\n  const { data, loading, error, refetch } = useQuery(QUERY);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error: {error.message}</p>;\n\n  return (\n    <Layout>\n      <h1>This should be rendered on server side</h1>\n      <pre>Data: {data.getPost}</pre>\n      <button onClick={() => refetch()}>Refetch</button>\n    </Layout>\n  );\n};\n\nexport default withApollo({ ssr: true })(SSR);\n"]},"metadata":{},"sourceType":"module"}