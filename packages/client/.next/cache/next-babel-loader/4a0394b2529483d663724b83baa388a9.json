{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/glennleo/newproject/packages/client/pages/index.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query GetUser {\\n    users {\\n      id\\n      name\\n      email\\n      password\\n      phone\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport { useQuery, gql } from \"@apollo/client\";\nimport Layout from \"../components/Layout\";\nimport { withApollo } from \"../apollo/apollo\";\nvar QUERY = gql(_templateObject());\n\nvar NOSSR = function NOSSR() {\n  _s();\n\n  var _useQuery = useQuery(QUERY),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      refetch = _useQuery.refetch;\n\n  if (loading) return __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 21\n    }\n  }, \"Error: \", error.message);\n  return __jsx(Layout, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }, __jsx(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  }, \"This should be rendered on client side\"), __jsx(\"pre\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }, \"Data: \", data.users), __jsx(\"button\", {\n    onClick: function onClick() {\n      return refetch();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  }, \"Refetch\"));\n};\n\n_s(NOSSR, \"Jp+fcJk/QxZ1Qx0OR1h5O02cnEU=\", false, function () {\n  return [useQuery];\n});\n\n_c = NOSSR;\nexport default withApollo({\n  ssr: false\n})(NOSSR);\n\nvar _c;\n\n$RefreshReg$(_c, \"NOSSR\");","map":{"version":3,"sources":["/Users/glennleo/newproject/packages/client/pages/index.tsx"],"names":["React","useQuery","gql","Layout","withApollo","QUERY","NOSSR","data","loading","error","refetch","message","users","ssr"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,GAAnB,QAA8B,gBAA9B;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAEA,IAAMC,KAAK,GAAGH,GAAH,mBAAX;;AAYA,IAAMI,KAAK,GAAG,SAARA,KAAQ,GAAM;AAAA;;AAAA,kBACwBL,QAAQ,CAACI,KAAD,CADhC;AAAA,MACVE,IADU,aACVA,IADU;AAAA,MACJC,OADI,aACJA,OADI;AAAA,MACKC,KADL,aACKA,KADL;AAAA,MACYC,OADZ,aACYA,OADZ;;AAGlB,MAAIF,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACb,MAAIC,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAWA,KAAK,CAACE,OAAjB,CAAP;AAEX,SACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAYJ,IAAI,CAACK,KAAjB,CAFF,EAGE;AAAQ,IAAA,OAAO,EAAE;AAAA,aAAMF,OAAO,EAAb;AAAA,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAHF,CADF;AAOD,CAbD;;GAAMJ,K;UACsCL,Q;;;KADtCK,K;AAeN,eAAeF,UAAU,CAAC;AAAES,EAAAA,GAAG,EAAE;AAAP,CAAD,CAAV,CAA2BP,KAA3B,CAAf","sourcesContent":["import React from \"react\";\nimport { useQuery, gql } from \"@apollo/client\";\nimport Layout from \"../components/Layout\";\nimport { withApollo } from \"../apollo/apollo\";\n\nconst QUERY = gql`\n  query GetUser {\n    users {\n      id\n      name\n      email\n      password\n      phone\n    }\n  }\n`;\n\nconst NOSSR = () => {\n  const { data, loading, error, refetch } = useQuery(QUERY);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error: {error.message}</p>;\n\n  return (\n    <Layout>\n      <h1>This should be rendered on client side</h1>\n      <pre>Data: {data.users}</pre>\n      <button onClick={() => refetch()}>Refetch</button>\n    </Layout>\n  );\n};\n\nexport default withApollo({ ssr: false })(NOSSR);\n"]},"metadata":{},"sourceType":"module"}