generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Match {
  id                       Int            @default(autoincrement()) @id
  home_id                  Int
  away_id                  Int?
  time                     DateTime?
  field                    String?
  location                 String?
  status                   match_status?  @default(PENDING)
  created_at               DateTime?      @default(now())
  updated_at               DateTime?      @default(now())
  team_match_away_idToteam Team?          @relation("match_away_idToteam", fields: [away_id], references: [id])
  team_match_home_idToteam Team           @relation("match_home_idToteam", fields: [home_id], references: [id])
  match_report             MatchReport?
  player_report            PlayerReport[] @relation("matchToplayer_report")

  @@index([away_id], name: "guestId_idx")
  @@index([home_id], name: "homeId_idx")
  @@index([id], name: "id")
  @@map("match")
}

model MatchReport {
  id                                Int     @default(autoincrement()) @id
  match_id                          Int     @unique
  result                            String?
  winner_id                         Int?
  loss_id                           Int?
  team_match_report_loss_idToteam   Team?   @relation("match_report_loss_idToteam", fields: [loss_id], references: [id])
  match                             Match   @relation(fields: [match_id], references: [id])
  team_match_report_winner_idToteam Team?   @relation("match_report_winner_idToteam", fields: [winner_id], references: [id])

  @@index([loss_id], name: "lossId_idx")
  @@index([winner_id], name: "winnerId_idx")
  @@map("match_report")
}

model Member {
  id        Int          @default(autoincrement()) @id
  member_id Int
  team_id   Int
  role      member_role? @default(MEMBER)
  cash      Int?         @default(0)
  user      User         @relation(fields: [member_id], references: [id])
  team      Team         @relation(fields: [team_id], references: [id])

  @@index([member_id], name: "memberId_idx")
  @@index([team_id], name: "teamId_idx")
  @@map("member")
}

model PlayerReport {
  matchId   Int
  id        Int   @default(autoincrement()) @id
  player_id Int
  score     Int?
  assist    Int?
  match     Match @relation("matchToplayer_report", fields: [matchId], references: [id])
  user      User  @relation(fields: [player_id], references: [id])

  @@index([matchId], name: "pl_match")
  @@index([player_id], name: "playerId_idx")
  @@map("player_report")
}

model Team {
  id                                        Int           @default(autoincrement()) @id
  name                                      String
  logo                                      String?
  description                               String?
  win                                       Int?          @default(0)
  loss                                      Int?          @default(0)
  home                                      String?
  creator_id                                Int?
  user                                      User?         @relation(fields: [creator_id], references: [id])
  match_match_away_idToteam                 Match[]       @relation("match_away_idToteam")
  match_match_home_idToteam                 Match[]       @relation("match_home_idToteam")
  match_report_match_report_loss_idToteam   MatchReport[] @relation("match_report_loss_idToteam")
  match_report_match_report_winner_idToteam MatchReport[] @relation("match_report_winner_idToteam")
  member                                    Member[]

  @@index([creator_id], name: "creatorId_idx")
  @@map("team")
}

model User {
  id            Int            @default(autoincrement()) @id
  name          String?
  email         String         @unique
  password      String
  phone         String?
  address       String?
  member        Member[]
  player_report PlayerReport[]
  team          Team[]

  @@map("user")
}

enum member_role {
  MANAGER
  MEMBER
  PENDING
}

enum match_status {
  PENDING
  DEAL
  DONE
}
