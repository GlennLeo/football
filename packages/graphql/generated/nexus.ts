/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import * as Context from "../context"



declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    crud: NexusPrisma<TypeName, 'crud'>
    model: NexusPrisma<TypeName, 'model'>
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  TeamWhereUniqueInput: { // input type
    creator_id?: number | null; // Int
    id?: number | null; // Int
  }
  UserWhereUniqueInput: { // input type
    email?: string | null; // String
    id?: number | null; // Int
  }
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenRootTypes {
  AuthUser: Context.AuthUser;
  Mutation: {};
  Query: {};
  Team: { // root type
    creator_id?: number | null; // Int
    description?: string | null; // String
    home?: string | null; // String
    id: number; // Int!
    logo?: string | null; // String
    loss?: number | null; // Int
    name: string; // String!
    win?: number | null; // Int
  }
  User: { // root type
    address?: string | null; // String
    email: string; // String!
    id: number; // Int!
    name?: string | null; // String
    password?: string | null; // String
    phone?: string | null; // String
  }
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  TeamWhereUniqueInput: NexusGenInputs['TeamWhereUniqueInput'];
  UserWhereUniqueInput: NexusGenInputs['UserWhereUniqueInput'];
  String: NexusGenScalars['String'];
  Int: NexusGenScalars['Int'];
  Float: NexusGenScalars['Float'];
  Boolean: NexusGenScalars['Boolean'];
  ID: NexusGenScalars['ID'];
}

export interface NexusGenFieldTypes {
  AuthUser: { // field return type
    token: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  Mutation: { // field return type
    createNewTeam: NexusGenRootTypes['Team'] | null; // Team
    login: NexusGenRootTypes['AuthUser'] | null; // AuthUser
    signup: NexusGenRootTypes['AuthUser'] | null; // AuthUser
  }
  Query: { // field return type
    filterTeam: NexusGenRootTypes['Team'][]; // [Team!]!
    team: NexusGenRootTypes['Team'] | null; // Team
    teams: NexusGenRootTypes['Team'][]; // [Team!]!
    user: NexusGenRootTypes['User'] | null; // User
    users: NexusGenRootTypes['User'][]; // [User!]!
  }
  Team: { // field return type
    creator_id: number | null; // Int
    description: string | null; // String
    home: string | null; // String
    id: number; // Int!
    logo: string | null; // String
    loss: number | null; // Int
    name: string; // String!
    win: number | null; // Int
  }
  User: { // field return type
    address: string | null; // String
    email: string; // String!
    id: number; // Int!
    name: string | null; // String
    password: string | null; // String
    phone: string | null; // String
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createNewTeam: { // args
      description?: string | null; // String
      home?: string | null; // String
      logo?: string | null; // String
      name: string; // String!
    }
    login: { // args
      email: string; // String!
      password: string; // String!
    }
    signup: { // args
      address?: string | null; // String
      email: string; // String!
      name?: string | null; // String
      password: string; // String!
      phone?: string | null; // String
    }
  }
  Query: {
    filterTeam: { // args
      name?: string | null; // String
    }
    team: { // args
      where: NexusGenInputs['TeamWhereUniqueInput']; // TeamWhereUniqueInput!
    }
    teams: { // args
      after?: NexusGenInputs['TeamWhereUniqueInput'] | null; // TeamWhereUniqueInput
      before?: NexusGenInputs['TeamWhereUniqueInput'] | null; // TeamWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
    user: { // args
      where: NexusGenInputs['UserWhereUniqueInput']; // UserWhereUniqueInput!
    }
    users: { // args
      after?: NexusGenInputs['UserWhereUniqueInput'] | null; // UserWhereUniqueInput
      before?: NexusGenInputs['UserWhereUniqueInput'] | null; // UserWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "AuthUser" | "Mutation" | "Query" | "Team" | "User";

export type NexusGenInputNames = "TeamWhereUniqueInput" | "UserWhereUniqueInput";

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: Context.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}