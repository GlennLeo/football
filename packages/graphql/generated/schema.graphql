### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AuthUser {
  token: String!
  user: UserAccount!
}

scalar DateTime

type Match {
  away: Team!
  created_at: DateTime
  field: String
  home: Team!
  id: Int!
  location: String
  status: match_status
  time: DateTime
  updated_at: DateTime
}

enum match_status {
  DEAL
  DONE
  PENDING
}

type MatchReport {
  id: Int!
  loss: Team!
  match: Match!
  result: String
  winner: Team!
}

input MatchReportWhereUniqueInput {
  id: Int
  loss_id: Int
  match_id: Int
  winner_id: Int
}

input MatchWhereUniqueInput {
  away_id: Int
  home_id: Int
  id: Int
}

type Member {
  cash: Int
  id: Int!
  role: member_role
  team: Team!
  user: User!
}

enum member_role {
  MANAGER
  MEMBER
  PENDING
}

enum MemberRole {
  MANAGER
  MEMBER
  PENDING
}

input MemberWhereUniqueInput {
  id: Int
  member_id: Int
  team_id: Int
}

type Mutation {
  createNewMatch(away_id: Int, field: String!, home_id: Int!, location: String!): Match!
  createNewMatchReport(loss_id: Int!, match_id: Int!, result: String!, winner_id: Int!): MatchReport!
  createNewMember(cash: Int!, role: MemberRole, team_id: Int!, user_id: Int!): Member!
  createNewPlayerReport(assist: Int!, match_id: Int!, score: Int!, user_id: Int!): PlayerReport!
  createNewTeam(description: String, home: String, logo: String, name: String!): Team
  login(email: String!, password: String!): AuthUser
  signup(address: String, email: String!, name: String, password: String!, phone: String): AuthUser
}

type PlayerReport {
  assist: Int
  id: Int!
  match: Match!
  score: Int
  user: User!
}

input PlayerReportWhereUniqueInput {
  id: Int
  matchId: Int
  player_id: Int
}

type Query {
  filterTeam(name: String): [Team!]!
  match(where: MatchWhereUniqueInput!): Match
  matches(after: MatchWhereUniqueInput, before: MatchWhereUniqueInput, first: Int, last: Int): [Match!]!
  matchReport(where: MatchReportWhereUniqueInput!): MatchReport
  matchReports(after: MatchReportWhereUniqueInput, before: MatchReportWhereUniqueInput, first: Int, last: Int): [MatchReport!]!
  member(where: MemberWhereUniqueInput!): Member
  members(after: MemberWhereUniqueInput, before: MemberWhereUniqueInput, first: Int, last: Int): [Member!]!
  playerReport(where: PlayerReportWhereUniqueInput!): PlayerReport
  team(where: TeamWhereUniqueInput!): Team
  teams(after: TeamWhereUniqueInput, before: TeamWhereUniqueInput, first: Int, last: Int): [Team!]!
  user(where: UserWhereUniqueInput!): User
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
}

type Team {
  creator: User
  description: String
  home: String
  id: Int!
  logo: String
  loss: Int
  members(after: MemberWhereUniqueInput, before: MemberWhereUniqueInput, first: Int, last: Int): [Member!]!
  name: String!
  win: Int
}

input TeamWhereUniqueInput {
  creator_id: Int
  id: Int
}

type User {
  address: String
  email: String!
  id: Int!
  name: String
  phone: String
  teams(after: TeamWhereUniqueInput, before: TeamWhereUniqueInput, first: Int, last: Int): [Team!]!
}

type UserAccount {
  address: String
  email: String!
  id: Int!
  name: String
  password: String!
  phone: String
  teams: [Team!]
}

input UserWhereUniqueInput {
  email: String
  id: Int
}
