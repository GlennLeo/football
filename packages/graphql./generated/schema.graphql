### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AuthUser {
  token: String!
  user: User!
}

scalar DateTime

input Match_ReportCreateManyWithoutTeamInput {
  connect: [Match_ReportWhereUniqueInput!]
  create: [Match_ReportCreateWithoutTeamInput!]
}

input Match_ReportCreateOneWithoutMatchInput {
  connect: Match_ReportWhereUniqueInput
  create: Match_ReportCreateWithoutMatchInput
}

input Match_ReportCreateWithoutMatchInput {
  result: String
  Team: TeamCreateOneWithoutMatch_ReportInput
}

input Match_ReportCreateWithoutTeamInput {
  Match: MatchCreateOneWithoutMatch_ReportInput!
  result: String
}

input Match_ReportWhereUniqueInput {
  matchId: Int
  winnerId: Int
}

input MatchCreateManyWithoutTeam_Match_guestIdToTeamInput {
  connect: [MatchWhereUniqueInput!]
  create: [MatchCreateWithoutTeam_Match_guestIdToTeamInput!]
}

input MatchCreateManyWithoutTeam_Match_homeIdToTeamInput {
  connect: [MatchWhereUniqueInput!]
  create: [MatchCreateWithoutTeam_Match_homeIdToTeamInput!]
}

input MatchCreateOneWithoutMatch_ReportInput {
  connect: MatchWhereUniqueInput
  create: MatchCreateWithoutMatch_ReportInput
}

input MatchCreateOneWithoutPlayer_StatisticsInput {
  connect: MatchWhereUniqueInput
  create: MatchCreateWithoutPlayer_StatisticsInput
}

input MatchCreateWithoutMatch_ReportInput {
  createdAt: DateTime
  date: DateTime
  field: String
  location: String
  Player_Statistics: Player_StatisticsCreateManyWithoutMatchInput
  Team_Match_guestIdToTeam: TeamCreateOneWithoutMatch_Match_guestIdToTeamInput
  Team_Match_homeIdToTeam: TeamCreateOneWithoutMatch_Match_homeIdToTeamInput
  updatedAt: DateTime
}

input MatchCreateWithoutPlayer_StatisticsInput {
  createdAt: DateTime
  date: DateTime
  field: String
  location: String
  Match_Report: Match_ReportCreateOneWithoutMatchInput
  Team_Match_guestIdToTeam: TeamCreateOneWithoutMatch_Match_guestIdToTeamInput
  Team_Match_homeIdToTeam: TeamCreateOneWithoutMatch_Match_homeIdToTeamInput
  updatedAt: DateTime
}

input MatchCreateWithoutTeam_Match_guestIdToTeamInput {
  createdAt: DateTime
  date: DateTime
  field: String
  location: String
  Match_Report: Match_ReportCreateOneWithoutMatchInput
  Player_Statistics: Player_StatisticsCreateManyWithoutMatchInput
  Team_Match_homeIdToTeam: TeamCreateOneWithoutMatch_Match_homeIdToTeamInput
  updatedAt: DateTime
}

input MatchCreateWithoutTeam_Match_homeIdToTeamInput {
  createdAt: DateTime
  date: DateTime
  field: String
  location: String
  Match_Report: Match_ReportCreateOneWithoutMatchInput
  Player_Statistics: Player_StatisticsCreateManyWithoutMatchInput
  Team_Match_guestIdToTeam: TeamCreateOneWithoutMatch_Match_guestIdToTeamInput
  updatedAt: DateTime
}

input MatchWhereUniqueInput {
  guestId: Int
  homeId: Int
  id: Int
}

enum Member_role {
  MANAGER
  MEMBER
  PENDING
}

input MemberCreateManyWithoutTeamInput {
  connect: [MemberWhereUniqueInput!]
  create: [MemberCreateWithoutTeamInput!]
}

input MemberCreateManyWithoutUserInput {
  connect: [MemberWhereUniqueInput!]
  create: [MemberCreateWithoutUserInput!]
}

input MemberCreateWithoutTeamInput {
  fee_status: Int
  role: Member_role
  User: UserCreateOneWithoutMemberInput!
}

input MemberCreateWithoutUserInput {
  fee_status: Int
  role: Member_role
  Team: TeamCreateOneWithoutMemberInput!
}

input MemberWhereUniqueInput {
  id: Int
  memberId: Int
  teamId: Int
}

type Mutation {
  createOneTeam(data: TeamCreateInput!): Team!
  login(email: String!, password: String!): AuthUser
  signup(email: String!, name: String, password: String!, phone: String): AuthUser
}

input Player_StatisticsCreateManyWithoutMatchInput {
  connect: [Player_StatisticsWhereUniqueInput!]
  create: [Player_StatisticsCreateWithoutMatchInput!]
}

input Player_StatisticsCreateManyWithoutUserInput {
  connect: [Player_StatisticsWhereUniqueInput!]
  create: [Player_StatisticsCreateWithoutUserInput!]
}

input Player_StatisticsCreateWithoutMatchInput {
  assist: Int
  score: Int
  User: UserCreateOneWithoutPlayer_StatisticsInput!
}

input Player_StatisticsCreateWithoutUserInput {
  assist: Int
  Match: MatchCreateOneWithoutPlayer_StatisticsInput!
  score: Int
}

input Player_StatisticsWhereUniqueInput {
  id: Int
  matchId: Int
  playerId: Int
}

type Query {
  filterTeam(name: String): [Team!]!
  team(where: TeamWhereUniqueInput!): Team
  teams(after: TeamWhereUniqueInput, before: TeamWhereUniqueInput, first: Int, last: Int): [Team!]!
  user(where: UserWhereUniqueInput!): User
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
}

type Team {
  creatorId: Int!
  description: String
  home: String
  id: Int!
  logo: String!
  loose: Int
  name: String!
  win: Int
}

input TeamCreateInput {
  description: String
  home: String
  logo: String!
  loose: Int
  Match_Match_guestIdToTeam: MatchCreateManyWithoutTeam_Match_guestIdToTeamInput
  Match_Match_homeIdToTeam: MatchCreateManyWithoutTeam_Match_homeIdToTeamInput
  Match_Report: Match_ReportCreateManyWithoutTeamInput
  Member: MemberCreateManyWithoutTeamInput
  name: String!
  User: UserCreateOneWithoutTeamInput!
  win: Int
}

input TeamCreateManyWithoutUserInput {
  connect: [TeamWhereUniqueInput!]
  create: [TeamCreateWithoutUserInput!]
}

input TeamCreateOneWithoutMatch_Match_guestIdToTeamInput {
  connect: TeamWhereUniqueInput
  create: TeamCreateWithoutMatch_Match_guestIdToTeamInput
}

input TeamCreateOneWithoutMatch_Match_homeIdToTeamInput {
  connect: TeamWhereUniqueInput
  create: TeamCreateWithoutMatch_Match_homeIdToTeamInput
}

input TeamCreateOneWithoutMatch_ReportInput {
  connect: TeamWhereUniqueInput
  create: TeamCreateWithoutMatch_ReportInput
}

input TeamCreateOneWithoutMemberInput {
  connect: TeamWhereUniqueInput
  create: TeamCreateWithoutMemberInput
}

input TeamCreateWithoutMatch_Match_guestIdToTeamInput {
  description: String
  home: String
  logo: String!
  loose: Int
  Match_Match_homeIdToTeam: MatchCreateManyWithoutTeam_Match_homeIdToTeamInput
  Match_Report: Match_ReportCreateManyWithoutTeamInput
  Member: MemberCreateManyWithoutTeamInput
  name: String!
  User: UserCreateOneWithoutTeamInput!
  win: Int
}

input TeamCreateWithoutMatch_Match_homeIdToTeamInput {
  description: String
  home: String
  logo: String!
  loose: Int
  Match_Match_guestIdToTeam: MatchCreateManyWithoutTeam_Match_guestIdToTeamInput
  Match_Report: Match_ReportCreateManyWithoutTeamInput
  Member: MemberCreateManyWithoutTeamInput
  name: String!
  User: UserCreateOneWithoutTeamInput!
  win: Int
}

input TeamCreateWithoutMatch_ReportInput {
  description: String
  home: String
  logo: String!
  loose: Int
  Match_Match_guestIdToTeam: MatchCreateManyWithoutTeam_Match_guestIdToTeamInput
  Match_Match_homeIdToTeam: MatchCreateManyWithoutTeam_Match_homeIdToTeamInput
  Member: MemberCreateManyWithoutTeamInput
  name: String!
  User: UserCreateOneWithoutTeamInput!
  win: Int
}

input TeamCreateWithoutMemberInput {
  description: String
  home: String
  logo: String!
  loose: Int
  Match_Match_guestIdToTeam: MatchCreateManyWithoutTeam_Match_guestIdToTeamInput
  Match_Match_homeIdToTeam: MatchCreateManyWithoutTeam_Match_homeIdToTeamInput
  Match_Report: Match_ReportCreateManyWithoutTeamInput
  name: String!
  User: UserCreateOneWithoutTeamInput!
  win: Int
}

input TeamCreateWithoutUserInput {
  description: String
  home: String
  logo: String!
  loose: Int
  Match_Match_guestIdToTeam: MatchCreateManyWithoutTeam_Match_guestIdToTeamInput
  Match_Match_homeIdToTeam: MatchCreateManyWithoutTeam_Match_homeIdToTeamInput
  Match_Report: Match_ReportCreateManyWithoutTeamInput
  Member: MemberCreateManyWithoutTeamInput
  name: String!
  win: Int
}

input TeamWhereUniqueInput {
  creatorId: Int
  id: Int
}

type User {
  email: String!
  id: Int!
  name: String
  password: String
  phone: String
}

input UserCreateOneWithoutMemberInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutMemberInput
}

input UserCreateOneWithoutPlayer_StatisticsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutPlayer_StatisticsInput
}

input UserCreateOneWithoutTeamInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutTeamInput
}

input UserCreateWithoutMemberInput {
  email: String!
  name: String
  password: String!
  phone: String
  Player_Statistics: Player_StatisticsCreateManyWithoutUserInput
  Team: TeamCreateManyWithoutUserInput
}

input UserCreateWithoutPlayer_StatisticsInput {
  email: String!
  Member: MemberCreateManyWithoutUserInput
  name: String
  password: String!
  phone: String
  Team: TeamCreateManyWithoutUserInput
}

input UserCreateWithoutTeamInput {
  email: String!
  Member: MemberCreateManyWithoutUserInput
  name: String
  password: String!
  phone: String
  Player_Statistics: Player_StatisticsCreateManyWithoutUserInput
}

input UserWhereUniqueInput {
  email: String
  id: Int
}
